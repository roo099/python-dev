{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Step 1: Submit Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Default Values\n",
    "b_dict = {'q':' ','w':' ','e':' ','a':' ','s':' ','d':' ','z':' ','x':' ','c':' '}\n",
    "\n",
    "#Main Run Module\n",
    "def start_game(start_player):\n",
    "    from IPython.display import clear_output\n",
    "   \n",
    "    if start_player == '':\n",
    "        player = raw_input(\"Who will go first: X or O? \").upper()\n",
    "        clear_output()\n",
    "    elif start_player[0] == 'tied':\n",
    "        clear_output()\n",
    "        player = start_player[1]\n",
    "    else:\n",
    "        clear_output()\n",
    "        print \"Player \" + start_player + \", as you lost last you get to play first...\" \n",
    "        print \"\"\n",
    "        player = start_player\n",
    "\n",
    "\n",
    "    submit_move(player)\n",
    "        \n",
    "    while check_win(player) == False and check_tie() == False:\n",
    "        clear_output()\n",
    "\n",
    "        if player == 'X':\n",
    "            player = 'O'\n",
    "        elif player == 'O':\n",
    "            player = 'X'\n",
    "        \n",
    "        submit_move(player)\n",
    "          \n",
    "    clear_output()\n",
    "    \n",
    "    if check_win(player) == True:\n",
    "        winner(player)\n",
    "    elif check_tie() == True:\n",
    "        tied(player)\n",
    "    \n",
    "#Submits players move    \n",
    "def submit_move(player):\n",
    "\n",
    "    print \"Player \" + player + \" : It's your turn...\"\n",
    "    print \"\"\n",
    "    \n",
    "    print_board()\n",
    "    \n",
    "    mark_cell = raw_input(\"Select your square? \")\n",
    "\n",
    "    while check_exist(mark_cell) == True:\n",
    "        mark_cell = raw_input(\"That spot is taken, please select another square? \")\n",
    "    \n",
    "    b_dict[mark_cell] = player\n",
    "    \n",
    "#Checks if that spot is already taken\n",
    "def check_exist(mark_cell):\n",
    "    while b_dict[mark_cell] in ['X','O']:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "#Checks if player has won  \n",
    "def check_win(player):\n",
    "    if b_dict['q'] == b_dict['w'] == b_dict['e'] == player:\n",
    "        return True\n",
    "    elif b_dict['a'] == b_dict['s'] == b_dict['d'] == player:\n",
    "        return True\n",
    "    elif b_dict['z'] == b_dict['x'] == b_dict['c'] == player:\n",
    "        return True\n",
    "    elif b_dict['q'] == b_dict['a'] == b_dict['z'] == player:\n",
    "        return True\n",
    "    elif b_dict['w'] == b_dict['s'] == b_dict['x'] == player:\n",
    "        return True\n",
    "    elif b_dict['e'] == b_dict['d'] == b_dict['c'] == player:\n",
    "        return True\n",
    "    elif b_dict['q'] == b_dict['s'] == b_dict['c'] == player:\n",
    "        return True\n",
    "    elif b_dict['e'] == b_dict['s'] == b_dict['z'] == player:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "def check_tie():\n",
    "    if b_dict.values().count('X')+b_dict.values().count('O') == 9:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "        \n",
    "\n",
    "#Winner module\n",
    "def winner(player):\n",
    "    print \"\"\n",
    "    print\"Congratulations \" + player + \"  ---  You are the Winner!!!\"   \n",
    "    print \"\"\n",
    "    print_board() \n",
    "    \n",
    "    if raw_input(\"Would you like to play again? Y or N :  \").upper() == \"N\":\n",
    "        print \"\"\n",
    "        print \"Thanks for playing...\"\n",
    "    else:\n",
    "        for keys in b_dict: b_dict[keys] = ' '\n",
    "            \n",
    "        if player == 'X':\n",
    "            start_player = 'O'\n",
    "        elif player == 'O':\n",
    "            start_player = 'X'\n",
    "   \n",
    "        start_game(start_player)\n",
    "\n",
    "    \n",
    "def tied(player):\n",
    "    print \"\"\n",
    "    print\"We seem to have a tie!!!\"   \n",
    "    print \"\"\n",
    "    print_board() \n",
    "    \n",
    "    if raw_input(\"Would you like to play again? Y or N :  \").upper() == \"N\":\n",
    "        print \"\"\n",
    "        print \"Thanks for playing...\"\n",
    "    else:\n",
    "        for keys in b_dict: b_dict[keys] = ' '\n",
    "            \n",
    "        if player == 'X':\n",
    "            start_player = ('tied','O')\n",
    "        elif player == 'O':\n",
    "            start_player = ('tied','X')\n",
    "   \n",
    "        start_game(start_player)\n",
    "\n",
    "    \n",
    "#Prints borad\n",
    "def print_board():\n",
    "    print \"\"\n",
    "    print \"     |     |     \"\n",
    "    print \" \",b_dict['q'],\" | \",b_dict['w'],\" | \",b_dict['e'],\" \"\n",
    "    print \"_____|_____|_____\"\n",
    "    print \"     |     |     \"\n",
    "    print \" \",b_dict['a'],\" | \",b_dict['s'],\" | \",b_dict['d'],\" \"\n",
    "    print \"_____|_____|_____\"\n",
    "    print \"     |     |     \"\n",
    "    print \" \",b_dict['z'],\" | \",b_dict['x'],\" | \",b_dict['c'],\" \"\n",
    "    print \"     |     |     \"\n",
    "    print \"\"\n",
    "    \n",
    "#Clears board to default\n",
    "def clear_board():\n",
    "    b_dict = {'q':' ','w':' ','e':' ','a':' ','s':' ','d':' ','z':' ','x':' ','c':' '}\n",
    "    print_board()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Step 2: Review Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "    Welcome to Roo's Tic Tac Toe!!!\n",
    "    \n",
    "    To select your square, please press the corresponding letter below:\n",
    "    \n",
    "         |     |     \n",
    "      q  |  w  |  e  \n",
    "    _____|_____|_____\n",
    "         |     |     \n",
    "      a  |  s  |  d  \n",
    "    _____|_____|_____\n",
    "         |     |     \n",
    "      z  |  x  |  c  \n",
    "         |     |     \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Step 3: Run to Play the Game"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "start_game('')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
